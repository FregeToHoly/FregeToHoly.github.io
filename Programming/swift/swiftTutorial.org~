#+TITLE: Swift Tutorial
#+AUTHOR: Hoyoul Park
#+DESCRIPTION: Org-HTML export made simple.
#+KEYWORDS:  org-mode, export, html, theme, style, css, js, bigblow
#+LANGUAGE:  en
#+OPTIONS:   H:4 toc:t num:2
#+MACRO: color @@html:<font color=""></font>@@
#+PROPERTY:  header-args :padline no
#+SETUPFILE: ~/Mythings/Myprojects/setup/theme-readtheorg.setup
#+HTML_DOCTYPE: html5
- if you want go back?  [[http://www.holytofrege.space/index.html][home]]
*----------
작성자: FregeHoly
작성일: <2018-12-30 Sun>
작성장소: Jeju
날씨: cloudy
-----------*

* comment
  #+begin_note
  주석은 2가지가 있다.
  #+BEGIN_SRC 
  singline: //
  multiline: /* */  
  #+END_SRC
  #+end_note
* print
 #+begin_note
 자주 쓰이는 print 사용법

 print(value), print(name)

  #+begin_quote
  string value는 조금 특이하다.

  print(value \(name))

  ex) print("test\(name)")
  #+end_quote
 #+end_note
 #+BEGIN_SRC swift
 var bint:Int = 3
 print("test \(bint)")
 #+END_SRC

 #+RESULTS:
 : test 3

* Values
#+begin_note
1. string ->predicate logic value
2. true/false -> propositional logic value
3. numbers -> math
이 3개가 기본적인 type이고 value이지만, swift는 엄청나게 많은 type을
만들어버렸다. data structure도 type이고 class도 type이다. 옛날 수학과
논리학만 있었다면, swift에서는 수학 논리학과 같은 type을 수없이 만들 수
있다는 것이다.
#+end_note
#+BEGIN_SRC swift
print("asdfasdf")
#+END_SRC

#+RESULTS:
: asdfasdf

* names
이름은 value를 가리킨다. 이름이 아무것도 가리키지 않는다면 문제가 생긴다.
존재하지 않는것에 이름을 붙일순 없다. 하지만, swift는 약간 유동적이다.
존재하지 않는것을 nil이라는 value라고 하는데, optional로 그 값을 허용할
수도 있다. 이름을 짓는 것은 camelcase로 한다.

또한, value는 종류가 있다. 그것을 type이라고 한다.
종류에 맞게 operator도 정해지기 때문에, 변수나 상수에 type을 명시한다.
swift는 약간 유동적이라서 안해도 된다. 그런데 나는 명시하기로 한다.

** constants
   #+begin_note
   let으로 values를 가르킨다. 이름이다. 변하지 않는다.

   #+BEGIN_SRC swift
   let cons:String = "constants"
   print(cons)
   #+END_SRC

   #+RESULTS:
   : constants

   #+end_note
** variables
   #+begin_note
   var로 value를 가르킨다. 이름이다. 변한다.
   #+BEGIN_SRC swift
   var str:String = "string"
   print(str)
   #+END_SRC

   #+RESULTS:
   : string

   #+end_note
* type conversion
#+begin_note
value가 3개에서 수많은 value가 생긴것은 수많은 type이 만들어졌다는 것을 
의미한다. type간의 변환이 가능한가? type간의 변환이란 말보다 직접적으로
value의 변환이라고 말할 수 있다. 또한 value를 가르키는 이름의 변환이라고도
말할 수 있다.

우선 기본적인 3가지 type에 대한 변환은 가능하다.

int -> string,float,double,bool
float->string,double,int,bool
string->int,float,double,bool =>nil
boole->string
#+BEGIN_SRC swift
var intnum:Int = 3
var floatnum:Float = 3.3
print(String(intnum))
print(Float(intnum))
#+END_SRC

#+RESULTS:
: 3
: 3.0

#+end_note
* 특이한 function(if)
#+begin_note
if는 function이라고 할 수 있다. 
형태는 다음과 같다.
#+BEGIN_SRC 
if condition {
  some code.
} else if condition {
some code.
} else {
some code.
}

#+END_SRC

 좀 특이하다. predicate + form의 형태다. predicate으로 premise를 나타내고
form으로 conclusion으로 conditional expression을 함수를 사용한다는
mccarthy의 생각을 그대로 나타냈다. Mccarthy가 말한 partial function의 개념이
여기에도 들어가 있다. condition이 입력이고, form이 출력이라면, 모든 입력에 
대해 값이 계산되는게 아니라, 일부 값은 undefined될 수 있다. if와 else if에
해당되지 않으면 undefined이기 때문이다. 그래서 else를 추가했다.

#+BEGIN_SRC swift
var bnumber:Int = 8
if bnumber < 10
{
print("number is smaller 10")
}
#+END_SRC

#+RESULTS:
: number is smaller 10

참고할 것중에 하나는, predicate function에 해당하는 조건은 엄청 길어지거나
함수로도 표현 가능하다. a && b && c || d ....이렇게 길어지는 계산을 function
으로 간략하게 표현할 수도 있다.
#+end_note
* 특이한 function - switch function
#+begin_note
Mccarthy가 말한 cond함수와 상당히 유사하다.

형식은 다음과 같다.
#+BEGIN_SRC 
swithc value {
    case value1 : some code

    case value2, value3 : some code
    
    default: some code
}
#+END_SRC

value와 value1 같다면 (true)이면 code를 실행한다. 실행하는게 if처럼 function form형태는
아니다.  :으로 code를 나타낸다. if에선 else로 처리한것을 switch에서 default로
표현한다.

case에서 여러개의 value가 있다면 or연산이 숨어있다. 두번째를 보면 된다.

#+end_note
* 특이한 함수 -for in loop
#+begin_note
일반적으로 loop라고 부르는 함수가 있다. for in 형태는 매우 특이하다.

형태는 다음과 같다.
#+BEGIN_SRC 
 for counter(variable name) in lower...upper{
 some code
 }
#+END_SRC

매우 특이하다. counter의 이름을 lower나 upper를 가르치게 한다. 그리고 그 변수가
함수의 입력이 되고, 함수의 form은 그대로 사용한다. 각각의 함수에서 인자로 넘어온
counter는 별개의 scope를 갖게 된다. counter가 인자의 역할을 하기 때문에 인자를
주지 않고 lower...upper만큼의 수만큼 반복되는 함수를 만들 수 있다. 그렇게 할려면
counter를 _로 표시하면 된다. 또한 counter의 type은 정해져 있다. Int형이다. 왜냐면
주어진 value가 int형 밖에 안된다. lower와 upper를 string으로 하고 counter:String
식으로 하면 에러가 난다. 에러의 이유는 Protocol때문이라는 데 잘 모르겠다.

1)for in 전형적인 example1

#+BEGIN_SRC swift
for index in 1...3
{
print(index)
}
#+END_SRC

#+RESULTS:
: 1
: 2
: 3

2) for in 각각의 local 인자를 갖는 함수라는 증거 example2

#+BEGIN_SRC swift
for index in 1...5
{
  var sum = 0
  sum += index
  print(sum)
}
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: 4
: 5
예상과는 달리 1에서 5까지 합을 출력하지 않는다. loop를 돌때 각각의 함수가
독립적으로 호출 되기 때문이다. 이것을 해결할려면 sum의 scope를 for이전에
기술해야 한다. 이것은 pure function이 아니라는 증거이기도 하다. 이것을
고쳐보자.

#+BEGIN_SRC swift
var sum = 0
for index in 1...5
{
  sum += index
  print(sum)
}
#+END_SRC

#+RESULTS:
: 1
: 3
: 6
: 10
: 15

#+end_note
* 특이한 함수 - while, repeat while
#+begin_note
while함수는 우리가 기존에 알고있는 while문과 같다.
#+BEGIN_SRC 
while condition {
some code.
}
#+END_SRC

repeat while의 경우는 condition이 뒤에 있다.
#+BEGIN_SRC 
repeat {
some code
} while condition
#+END_SRC
#+end_note
* function
#+begin_note
형태는 다음과 같다.

#+BEGIN_SRC 
func name () {
some code
}
#+END_SRC

func란 키워드를 사용하고, name과 form으로 구성되어 있다. function name은
camelcase로 작성한다. form안에는 expression이 들어간다. 일반적인 function의
예를 보자.

#+BEGIN_SRC swift
func addTwoNumbers() {
   let a = 1
   let b = 2
   let c = a + b
   print(c)
}
#+END_SRC

위에서 보듯이 c = a+b라는 expression을 나타내기 위해서 name과 operator를 
사용했다. 솔직히 간단한 expression인데도 programming language에선 좀 
복잡하다. function을 지우고, 그냥 let부터 print까지 써도 실행하는데 문제가 
없다. expression만 죽 나열해도 되는데 이렇게 쓰는 이유는 한번 정의하면 재사용이
가능하기 때문이다.

또다른 예를 보자. 

return값이 있는 function

#+BEGIN_SRC 
func addTwoNumber() -> Int {
   let a = 1
   let b = 1
   let c = a + b
   return c
}
let sum = addTwoNumbers()
#+END_SRC

return값이 있는 함수는 expression만 표현한것과는 다르다. function이 재사용으로만
사용하는게 아니라, 특정 값을 표현하는 것처럼 보인다. value처럼 sum이 function을
가르킨다. return값이 있는 function은 value라고 보여진다. 형식적으로는 return값의
type을 function에 기술하는데, 이 부분도 function이 값으로 취급됨을 보여준다.

이제 인자가 있는 경우를 보자.

#+BEGIN_SRC 
func addTwoNumbers(arg para:Int) -> Int {
   let a = para
   let b = 1
  
   return a+b
}
let sum = addTwoNumbers(arg: 2)

#+END_SRC

argument가 있는 function은 좀 다르다. 우선 argument label이란게 있다. 이것은
lambda 함수의 영향을 받았다. lambda (x y) (y^2 + x)에서 앞에 (x y)는 form에서의
bound variable 적용 순서를 가르킨다. 그래서 함수가 적용될때 (3 4)라는 인자에 
대해서 13이란 값, 19라는 값이 결정되기 모호한것을 해결하기 위해 lambda calculus에선
x가 3이고 y가 4라는 것을 가리킨다는 것을 명시적으로 보여주기 위해서 (x y)가 추가되었다고
Mccarthy논문에서 밝히고 있다. 따라서 지금 swift에서 argument label은 람다형식을
따르고 있다. 즉 argument label을 사용해서 호출할 때, 이 값은 어떤 변수와 binding
될것임을 명확히 해준다. 이건 기존의 프로그램에는 없는 방식이다. 그래서 swift에서는
기존과 같이 쓸수 있게 argument label을 _로 설정하면 기존 프로그래밍처럼 
addTwoNumbers(2)라고 쓸수 있게 된다.


그리고 함수에 사용되는 내부 인자들은 name이다. name은 무언가를 가리켜야 한다.
아무것도 없는데 가리키면 안된다. 이런 일이 함수를 정의하는데 있어선 자주 일어난다.
함수에선 인자를 그냥 쓰는 경우가 많다. swift에선 그런경우를 위해서 optional이란것도
준비해두었다. 

#+end_note
* class 
#+begin_note
현대 언어는 상당히 복잡하다. 옛날 언어는 value와 value를 모은 structure, structure
가 있어서 생기는 operator만 가지고 프로그래밍을 했다. 거기서 value의 종류가 달라도 
각각의  value와 관련된 연산이 적용되었거 그 연산과 value로 computation을 했다. value를
한데 모아서 data structure란 것도 만들고, structure가 만들어지면서 자연스럽게
operator도 생겼다. 이것은 기존의 학문 predicate logic, propositional logic, math에
있던것이다. 그런것들이 mathlogic과 programming language의 과정을 거치면서 변하게
된다. mathlogic과 programming language에선 3개의 서로다른 value들을 조합해서 사용해야하고
3개의 서로 다른 type에 적절한 structure, operator도 합쳐써야 했다. 그런것을 하기 
위해서 함수라는 math방법론이 사용되게 된다. function은 type에 구분하지 않고 쓴다. 
type에 독립적이다.따라서 type을 명시를 해주어야 한다. 어떤 type을 써써 어떻게 할것인가?
그것을 function definition이라고 한다. 수많은 function을 사용해서 우리는 3개의 type을 넘나드는
cross over한 연산이 가능해 졌다. 그런데 여기서 class란게 나온다. class란것은
하나의 type을 만들겠다는 것이다. 기존의 type은 자신만의 value가 있었고, 그것에 따른
structure와 operator가 있었다. 새로운 type을 만들려면 그래야 한다. 그런데, class는
좀 다르다. 마치 data structure처럼 비슷한 형태지만, function처럼 type에 독립적이다.
우리가 array란 자료구조를 보면 int array처럼 type에 종속적이다. 반면 class는 data
structure와 비슷하지만, type에 종속적이지 않다. 여러종류의 data를 모아서 사용한다. 
그래서 function과 상당히 비슷하다. function처럼 type에 의존적이지 않기 때문에
function처럼 어떤 type을 사용해서 무엇을 할것인지 명시해줘야 한다. class도 definition
이 필요한 것이다. function이 return값을 사용하면서 value의 역할도 하듯이 class도
instance화 되면서 value의 역할을 하게 된다. 그런데 이 value는 좀 다르다. function도
value를 return하면서 마치 function이 value처럼 보이기도 하지만, 어디까지나 기존의
value형태로 도출되었지 새로운 value를 만든건 아니였다. 그런데 class는 기존의 type
에서 사용된 value를 사용해서 해서 하나의 구조체(data structure)를 만들었지만, type이
없기 때문에 새로운 type을 만들고 새로운 value를 만들어버린다. 새로운 value를
만든다는 것은 대단하다. 새로운 value에 대한 operator는 무엇인가? function이 그 
역할을 하게 된다. function은 원래가 이종적인 data type을 처리하고 type에 맞는 
value를 return한다. 그런데 class란 놈이 새로운 value를 만들어 냈는데, 이 value를
처리하는 operator는 새롭게 만드는 것이 아닌, function을 이용하는 것이다. function이란게
원래 잡놈이기 때문에 이를 충실히 수행한다. class의 탄생으로 우리는 엄청나게 많은
type과 그 type에 맞는 value를 갖게 되었다. 현대 언어는 매우 복잡하게 되었다.

class definition은 다음과 같다. 

#+BEGIN_SRC 
class cname {
  var a = 3
  var b = 2
  
  func f ->Int {
  return a+b
  }
}

cname() -->value를 만든다.
var classname = cname() -->value이기 때문에 이름도 있을 수 있다.
#+END_SRC

class는 여러 type의 기능을 조합적으로 사용해서 만들기 때문에 definition이
필요하다고 했다. 어떤 type을 사용해서 만드는지 알아야 할 것 아닌가? 이렇게
만드는게 class definiton이다. class를 만들고 class name()하면 value가 
만들어진다. value가 만들어지면 name도 붙일 수 있다.

#+end_note
* class Inheritance
#+begin_note
class는 수만개의 type과 value를 만들 수 있게 되었다. class는 type을 만드는데
새롭게 만든다. 상속이란 방법을 통해서 기존의 type을 재사용하는 것이다. 재사용의
의미도 있지만, 우리가 operator라는 아주작은 function으로 부터 복잡한 function을
만들어서 쉽게 사용했던 거와 비슷하게 사용할 목적으로 inheritance라는 개념을 사용
한것이다. 

사용법
#+BEGIN_SRC 
class MyCar : Car
{
}
#+END_SRC

이렇게 쉽게 상속한다. 이렇게 되면 Car라는 superclass에서 사용하는 함수와 value를
사용할 수 있게 된다. 그리고 function도 재정의가 가능하다.

override function의 예를 보자.
#+BEGIN_SRC 
class Car {
   var speed = 200

   func drive {
       print("Driving at \(speed)")
       }
  }

class myCar : Car {
   override func drive() {
       super.drive()
       print("mycar print")
       }
       func fly(){
       print("flying")
       }
}
#+END_SRC
여기서 보면 car를 상속받고 function을 재정의 할 수 있다. function을 재정의
한다는 의미는 아예 새롭게 쓰겠다는 말이다. 그런데 superclass에서 사용된 내용도
지우지말고 수행하려면 super().drvie()를 사용한다.
#+end_note
