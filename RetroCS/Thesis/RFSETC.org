#+TITLE: Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part1
#+AUTHOR: Hoyoul Park
#+DESCRIPTION: Org-HTML export made simple.
#+KEYWORDS:  org-mode, export, html, theme, style, css, js, bigblow
#+LANGUAGE:  en
#+OPTIONS:   H:4 toc:t num:2
#+MACRO: color @@html:<font color="$1">$2</font>@@
#+PROPERTY:  header-args :padline no
#+SETUPFILE: ~/Mythings/Myprojects/setup/theme-readtheorg.setup

- if you want go back?  [[http://www.holytofrege.space/index.html][home]]
*----------
작성자: FregeHoly
작성일: <2018-12-22 Sat>
작성장소: Jeju
날씨: cloudy
-----------*

* Review
#+begin_note
이 논문은 lisp의 기본원리를 설명한다. 이 논문을 이해하기 위해선 기본적으로 알아야
할 것이 있다.

** 문제(problem)
    #+begin_note
    {{{color(red,[태초에 문제가 있었다.])}}}
     
    #+CAPTION: 태초에 문제가 있었다.
    #+ATTR_HTML: :width 500px
    [[./img/mccarthy/review1.png]]


    {{{color(red,[문제를 풀기위해 학문이 발전했다.])}}}

    #+CAPTION: 세가지 가지 문제
    #+ATTR_HTML: :width 500px
    [[./img/mccarthy/questions.png]]

    문제를 풀기 위해서 학문이 발전했다. propositional logic은 t/f를 알기위한 질문을
    풀기 위해서 만들어졌다. Predicate Logic은 t를 만족하는 thing을 찾기 위한 질문을
    풀기 위해서 만들어졌다. 혹은 f를 만족하는 thing을 찾기 위한 질문을 풀기 위해 만들
    어졌다. Predicate logic은 propostional에서 다루는 t/f문제에서 파생되었다. 수학은
    수치를 알기위한 질문을 풀기 위해 만들어 졌다.

    #+end_note

** 답(values)
   #+begin_note
   {{{color(red,[세가지 values])}}}

   #+CAPTION: 세가지 values
   #+ATTR_HTML: :width 500px
   [[./img/mccarthy/answers.png]]

   우리는 문제에만 매몰되서 푸는 것에만 집중한다. 변수를 만들고 함수를 만든다. 무언가를
   풀려고 하는데, 과연 우리가 알고자하는 답은 무엇일까? 답에 대해선 큰 신경을 쓰지 않는다.
   그래서 답을 주어도 답을 인식하지 못하는 불상사가 일어나기도 한다. 각각의 학문에서 
   알고자 하는 답은 123,"사과",yes(T), 이 세가지다. 이 세가지밖에 없다. 이제 문제에
   집중하자.

   #+end_note

** 문제의 기술 1 - expressions
   #+begin_note
   {{{color(red,[expressions])}}}

   각각의 학문은 자신이 알고자하는 것을 알기 위해서 많은 이론이나 법칙을 통해 발전해 왔다.
   문제의 답을 찾기 위한 발전이다. 처음에 문제는 자연어로 기술 되었지만,
   자연어를 써서 문제를 기술하는 것은 문제가 많기 때문에 각각의 학문은 자신만의 언어를 가지고 
   문제를 기술하고 문제를 풀어 왔다. 문제를 어떻게 기술하느냐?도 또다른 학문이다.
   그만큼 할 얘기가 많은 분야다. 여튼 우리는 문제를 기술할 때 (1)이미 알고 있는 것과 
   (2)모르는 것과의 (3) 그들의 관계를 통해서 문제를 해결하려고 한다. 따라서, 이 3개가 포함이 된다.
   수학에서 예를 들어보자.

   #+begin_quote
   y = x + 1
   #+end_quote

   우리는 모르는게 2개있다. x,y 이것을 찾는게 답이다. x,y라는 것은 숫자일 것이다. 
   왜냐 수학에서 우리가 찾을 답(value)은 수이기 때문에...그럼 1이라는건 무엇인가? 
   1은 값이다. value...이것을 해석할 때, 그냥 value가 아닌, 이미 이전에 구한 답이거나
   답으로 이미 정해 놓은것이라고 해석하는게 좋다. axiom처럼...
   그런 다음에  우리는 이미 알고 있는 것과 모르는 것과의 관계를 기술한다. 이게
   문제를 기술하는 방식이다. 그럼 수학말고 propositional logic을 살펴보자.

   {{{color(red,[propositional logic에서의 문제 기술])}}}
   #+begin_quote
   false and true
   #+end_quote

   #+begin_quote
   Propositional logic에서 우리가 이미 알고 있는 것은 무엇인가?

   ==> true, false다. 

   Propositional logic에서 알고자 하는 것(모르는것)은 무엇인가?

   ==> false and true가 무엇이냐?

   Propositional logic에서 관계는 무엇이 있는가?

   and or not xor...
   #+end_quote

   수학과는 약간 차이가 있지만, 왜냐면, true and false라는 문장은
   우리가 아는것이고 관계(and)만을 사용해서 표현했기 때문에.. 하지만, 이렇게 아는것과
   관계만을 표시해서 모르는 것을 표현하는게 propositiaonl logic의 특징이기도 하다.
   물론 표기법을 x = true and false로 한다면 수학과 비슷하다.
   여튼 1)아는것(이미 알고있는것) 2) 모르는것 3)관계를 통해 문제를 기술하는 것은 
   확실하다. 

   결론적으로 우리는 이런 필수적인 정보들을 조합해서 문제를 기술 한다.

   이런 필수적인 정보는 언어마다 다르고, 표현하는 심볼도 각기 다르다. 당연하다. 
   알고자하는 게 다르고, 그 값이 다르기 때문이다. 
   여튼 이런 필수적인 정보를 특정한 symbol을 사용하고, 이런 심볼들을 조합한 것을
   expression이라고 하는 것을 아는게 중요하다. 

   #+begin_quote
   그러면 여기서 질문! 모르는 것이 없을 때 아는것만의 관계를 통해서 무언가를
   표현한다면 그것도 expression이라고 말 할 수 있는가? 예를 들어보자.

   [수학]: 3 + 2 = 5 

   [논리학]: true and true 

   수학은 맞다. 그런데 논리학은 좀 다르다. true라는 사실과 and라는 관계만
   사용해서 표현 했지만, 이게 질문이 된다. true and true가 true인지 아닌지를
   묻는 질문이다. 즉 학문마다, expression을 나타내는 표현 방식은 다르다.

   #+end_quote

   #+end_note


** 문제의 기술2 - function(1)
   #+begin_note
   function은 수학에서 사용되었다. leibniz가 만들었다고 알려져 있다. function은 문제를
   기술하는 최고의 방법이다. math뿐만 아니라 propositional logic, predicate logic에
   모두 사용할 수 있는 방법이기 때문이다. expression과 function은 문제를 기술한다는 점은
   같지만, 개념적으로 다르다. 첫번째로,  expression은 그 학문을 기술하는 언어가 가진 
   요소들을 combination한 것이라서, domain specific한 면이있다. 반면에 function은
   domain-specific하기 보단 개념적이다. 아래 그림처럼 개념적이다.
   
   {{{color(red,[functions vs expressions: 개념적 차이])}}}
	
   #+CAPTION: function
   #+ATTR_HTML: :width 400px
   [[./img/mccarthy/function1.png]] [[./img/mccarthy/function2.png]]
   #+end_note
   
** 문제의 기술2 - function과 expression의 비교
   {{{color(red,[functions vs expressions: 일반화])}}}

   expression자체는 values들과 관계와 변수를 조합해서 문제를 기술한다. 반면에 
   함수에서 문제를 기술하는 방식은 일반화의 방식을 사용한다. fomalism이라고도
   부를 수 있는데, 수많은 케이스를 케이스 별로 기술하는게 하는게 아니라, 특정집합
   이 모두 적용되는 방식으로 기술 된다. 그래서 함수는 법칙,theorem을 만드는
   것과 비슷하다. 그러면 어떻게 문제를 해결하나? 매번 법칙을 만든다는게 쉬운
   일이 아닌데... 그런데 그렇다. 각각의 학문에선 어떤 문제를 푸는데 있어서, 기존의
   법칙(함수)를 이용해서 문제를 풀곤했다. 물론 함수로 문제를 푸는 것은 이렇게 기존에
   만들어 놓은 함수를 이용하는 방식과, 자기자신을 재사용하는 재귀적인 방식이 있다. 재귀적으로
   호출해서 사용하는 방식이 일반적이고, 다른 함수를 이용하는 방식은 operator라고 
   부르는 아주 기본 함수로 부터 확장되는 방식을 이용한다. 이것은 문제 기술보단 풀이에
   해당 하기 때문에 다음 섹션에서 정리하기로 한다.

   다시 돌아와서 함수로 문제를 표시하는 것은 법칙을 만드는 것과 같다고 했다. 
   법칙은 definition이 필요하다. 특정 케이스가 아닌 여러 케이스에 적용되어야 하기 
   때문에 definition을 만들어야 하는 것이다. function이 expression과는 다른점이다.

   function과 expression과의 비교설명도 끝이 났다. function이 expression과 다른점이
   domain-specific하지 않기 때문에, 개념만 존재하기 때문에, 각각의 학문에도 function이
   사용될 수 있다는 것이다. 각각의 학문에서 function이 사용되는데 특징이 있다. 문제(학문)에
   따라 함수의 종류가 결정되어 있다는 것이다.

   {{{color(red,[proposition logic을 function으로])}}}

   propositional logic은 truth value를 truth value로 mapping하는 함수로 
   볼 수 있다. logical connectivities들이 곧 함수다. 즉 propositional logic에서
   만들어지는 모든 함수는 t/f -> t/f로 가는 함수로 표현된다. 


   {{{color(red,[predicate logic을 function으로])}}}

   predicate logic은 모양 자체도 함수의 모습을 띠고 있고 그 자체가 함수로 표현된다.
   특정 양, object, thing을 나타내는 문자열과 truth value를 mapping하는 함수다.
   "string" => t/f로 가는 함수로 표현된다.

   {{{color(red,[math를 function으로])}}}
     
   math의 모든 것은 function으로 표현된다. math가 곧 function으로 봐도 무방.
   number => number로 모든 함수가 표현.

   각각의 학문(언어,type)을 function으로 표현가능하고, 또한 function은 학문이
   가진 모든 요소들도 설명이 가능하다.

   우선 value는 그냥 function으로 봐도 된다. function을 수행하면 return을 한다.
   return은 value의 형태로 할수 있다. 그래서 function을 수행한 결과를 value로 하면
   function은 value를 표현할 수 있다. 물론, function은 모든 형태를 다 return할
   수도 있다. function이 function을 return할 수도 있다. 또한 church number나 괴델
   number처럼, function 그 자체로 value를 표현할 수 있다. 여튼, 그다음, name에
   대해서 알아보자. value는 name을 붙여서 사용하는데, constant와 variable은 
   말 그대로 name과 valueb를 연결한 하나의 함수다.
   operator도 당연히 함수로 표현 가능하다. propositional logic의 connectivities들도
   function으로 가능하고, predicate의 operator equal greater, 이런거 다 함수다.
   수학의 operator인 +,\,*- 도 다 함수가 된다.

   data structure도 array, list, graph,tree 모두 함수다.

   어떻게 보면 이세상 모든 것, 모든 학문은 함수로 표현 될 수 있다. 그러니 math,
   predicate logic, propositional logic을 통합하려고 하는 시도. mathlogic을
   이어 받은 programming language에서 function을 안 쓸수가 없는 것이다. functional
   language가 얼마나 자연스러운 개념인지 우리는 알수 있다.
   
** function의 사용과 특징.
   #+begin_note
   다시 한번 정리하자면, 함수는 보편적인 개념이기 때문에 어느 문제에도 적용될 수 
   있다. 또한 함수는 각각의 학문(언어)이 포함하는 expression을 표현할 수도 있다. 
   각각의 학문에는 기본적인 함수가 존재한다. 이 함수를 foundation을 삼아서 새로운
   function을 작성한다. 기본이 되는 함수를 operator라고 한다. 마치 axiom과 같다.

   axiom으로 새로운 함수를 만들기도 하지만, 다른 방식으로는 재귀를 사용하는 방식이
   있다. 이 방식으로 함수를 만드는 경우가 상당히 많다고 한다.

   문제를 기술한다는거...즉 함수를 만든 다는 것은, 그 문제 한개에만 적용 되지 않는다.
   여러 케이스에 적용되게 보편적으로 만들어지기 때문에 만드는 데는 시간이 걸리고 
   어려운 작업이다. 문제를 푸는 것은 이렇게 어렵게 만든 함수를 적용하는 것일 뿐이다.

   함수를 만든다는 것은 기존의 알고있는 값과 relation,변수를 조합하게 되는데, 솔직히
   relation도 이미 알려진 함수(operator)로 보면 되고, value들은 (이미 알고 있는, 
   이미 계산된 값)으로 보면 된다.  즉 이미 알려진 정보(data)와 알고자하는 정보(변수)와의
   관계를 기존의 함수를 이용해 연결하는 식으로 함수를 design한다. 

    #+begin_quote
    y = x + 1
    #+end_quote
    
    이런 함수를 봐도, 1, +(기존에 알고있는 값과 함수)를 x와 연결하는 것을 볼 수 있다.

   #+end_note

** class에 대해서.
   #+begin_note
   class의 경우, lisp에는 없지만, function을 얘기하면서 class를 얘기하지 않을 수 없다.
   function이 모든 것을 포함하지만, function은 일반적으로 다양한 학문에서 파생된 
   operator와 name들을 섞어서 사용할 수 있게 해준다. 비슷한것으로 class가 있다.
   class는 하나의 새로운 data type을 만든다고 볼 수 있다. type이란게 하나의 학문
   이라고 했는데, 각각의 학문에선 value가 있고, 그 안에서 operator가 있다고 했다.
   이것을 비슷하게 흉내 낼 수 있지 않을까? 그게 class 다. 함수 처럼 다양한 학문의
   value의 name과 operator를 정의해서 type을 만들어 버린다. 함수나 class나 모두
   다양한 기존학문의 요소를 가져다가 사용하기 때문에 definition이 필수다. 그러면
   data structure와 class의 차이도 자연스럽게 알수 있지 않나?

 그래서 class
   와 function은 definition을 하고 적용해서 사용한다.
   #+end_note
** 기타

 {{{color(red,[ Logic])}}}
  #+begin_attention

 T/F를 묻는 질문에 대한 연구는 Aristotle이 시작한다. Aristotle은 Propositional
 logic과 predicate logic 모두에 대한 기반 연구를 했다. 그런데 Aristotle이 죽고
 난 후, 중세에는 주로 propositional logic에 대한 연구가 활발히 되었다. 이 연구의
 한계와 문제점은 자연어를 사용해서 propostional logic 표현하고 연구했다는 것이다.
 자연어는 명확하지 않다. 자연어가 가진 특성때문에 모호해 질 수 있다. 예를 들어보자.
 물을 적당히 뜨겁게 해! 치타는 매우 빠르게 움직인다. "적당히", "빠르게"는 너무 
 모호하다. 그리고 자연어를 쓰면 문장이 너무 길어진다. 그래서 이것을 symbol화할 필요가
 있게 된다. 이것을 G. Boole이란 사람이 하게 된다. 그런데, 이런 시도는 수학에서
 이미 했다. 수학이란 학문은 시작할 때 부터, 자연어의 문제로 부터 벗어나기 위해
 기호를 사용해서 표현했다. 솔직히 Boole도 수학의 그런 특징을 알고 논리학에 적용한
 것이다. 그런데 symbol을 사용한다는 것은 단순한 게 아니였다. symbol을 사용한다는
 것은 언어를 만드는것이기 때문이다. 그런데 Boole이 symbol을 도입할때만 하더라도 
 언어학적 입장에서 분석하진 않았다. 언어학적인 분석은 후대에 이루어졌다. 여튼 boole이
 문장에 symbol을 대응하면서 A∧B∧C∧D∧E∨F....이런식의 표현이 가능해 졌다. 이런표현을
 문장으로 쓰면 8줄이상인데 1줄로 해결되는 것이다. 사고의 폭이 넓어지고 생각이 넓어
 지게 된다. 다루는 문장의 수가 엄청 늘어나게 되는 것이다.
   #+end_attention
 #+end_note
 #+begin_note
 {{{color(red,[Lisp의 아이디어])}}}

 #+CAPTION: lisp idea
 #+ATTR_HTML: :width 600px
 [[./img/mccarthy/idea1.png]]

 #+end_note
** code와 data 그리고 data structure 그리고 알고리즘.
   #+begin_note
   우리는 3개의 학문은 문제, 질문으로 부터 시작되었다고 말했다. 그 질문은 답을
   원한다. 답은 3가지 종류가 있다고 했다. 이 답을 value라고 부르는데, propositional
   logic에서 찾는 답은 t/f, true,false가 value다. predicate logic은 문자열로
   표현되는 thing을 찾는다. 그래서 value는 문자열이다. math에서는 number를 찾는다.
   그래서 value는 number다. 

   {{{color(red,[code란?])}}}
     
   code는 문제다. 문제가 어떻게 표현하는가는 expression과 function을 사용한다. expression
   과 function은 기존에 알고있는 value와 모르는것(알고자 하는 것)과의 관계를 통해서
   value를 구한다. 이것을 표현할때, 이미 알고 있는 value나 알고자하는 value에 이름을
   붙여서 사용할 수 있다. 이것을 상수와 변수라고 한다. 상수는 이미 알고 있는 value에
   이름을 붙인것을 말한다. 변수는 value를 가르키는 이름이지만, 아직 모르는 것이다.
   이름을 붙이는 것은 logic이란 학문이다. logic이란 학문은 자연어로 문장을 표현하는데
   그 문장이 "String"이기 때문에 value다. 긴 value로 code를 표현한다? 너무 복잡하다.
   그래서 이름을 붙여준것이다. 이름을 상수와 변수라고 하는것은 조금 문제가 있다. logic에선
   수가 value가 아니기때문이다. constants, variable은 수가 아니다. 수학에서만 통용되는
   용어다.
   
   code는 문제를 표현한것이고,  문제의 표현은,  알고있는것(constant)와 모르는것(variable)의
   관계를 통해서 기술된다. 이렇게 기술된 문제를 해결하는것, code로 부터 value를 얻는 과정이 evaluation이다. 

   {{{color(red,[data란?])}}}
   
   data란 이미 알고있는 value다. t,f도 data고, 문자열도 data고, number도 data다. 각각의 학문에서
   data다. 그런데 data는 datum의 복수다. 하나가 아니다. txt파일의 수많은 문장들, 숫자들, true,false
   모두 data다.

  {{{color(red,[data structure란?])}}}
  
  data는 values라고 말했다. 수많은 values를 특정한 구조에 맞추어 넣어놓으면 그게 data structure이다.
  예를 들어, food가 data라고 한다면 food를 선반에 놓는 것을 data structure라고 한다. structure를
  사용해서 values를 정리하는 것에는 특정한 관계가 생긴다. 예를 들어서 선반1에 food1을 올려놓고 선반2에
  food2를 올려놓자. structure가 생기면 가장 먼저 values에는 membership이라는 게 생긴다. food1이
  선반1에 있는가? 선반2에 있는가? 이것을 membership relation이라고 한다. values만 있을때는 없었던
  현상이다. value와 structure간의 관계, 그것이 membership relation이다. 그리고 생각할 수 있는게,
  선반1의 food1을 선반2로 옮길수 있다. 또한 선번1 food옆에는 다른 물건이 있을 수 있다. 단일 동작이
  주어진 구조에서 있을 수 있는 것이다. 이렇게 단순한 동작은 structure안에 여러개 있을 수 있다. 
  이런것을 operation이라고 한다. 즉 구조가 만들어지면서 value의 단순한 이동이나 변경이 가능해지는데, 
  이런것을 operator라고 한다. operator와 비슷한것으로 function이 있다.  선반1의 물건을 선반2로 
  옮기고, 다시 선반1로 옮기자. 이런것은 operator로 한번에 할 수 없다. 선반1을 선반2로 옮기는 operator
  와  선반2의 food를 선반1로 옮기는 operator를 사용한다. 여러개의 operator를 사용하는 것은 번거로운일이다.
  그래서 function이란게 생겼다. function은 여러개의 operator를 조합해서 만들 수도 있고, 간단한 function
  으로는 operator도 만들 수 있다. function은 원래 특정 언어에 속하는 operator나 value와는 다르다.
  개념만 있고 여러 학문에서 두루 사용되었다. 그래서 mathlogic(math +logic)을 물려받은 programming언어
  에서도 function은 사용된다. 이런 특징으로 function은 여러 type을 섞어 쓸수 있게 만들어주는 유일한 도구
  이기도 하다. operator는 해당 type(학문)에서만 사용된다면, function은 여러 type에서 사용하는 operator를
  다 사용할 수 있다. 그래서 function에는 type을 명시해야 한다. cross-over를 하기 때문이다. 또한 function은
  이름을 갖는다. value가 이름을 갖는 거랑 비슷하다. 문장이란 value를 이름을 써서 간단히 사용하듯이 function도
  수많은 operator를 갖는데, 간단히 표현하기 위해 name도 갖는다. function이 여러type에 적용되고 처리하는 value도
  여러가지 이기 때문에 function은 반드시 definition이 필요하다. 또 한가지 특징으로 function 법칙과 같다.
  즉 하나의 케이스에만 해당하는 게 아니라, 모든 value에 대해 행해진다. 모든 value라는
  표현보다, 집합이란 표현이 더 나을 수도 있다. 여튼 특정 케이스 하나에만 적용되지 않기 때문에 법칙과
  비슷하다. 다시 정리하자. operator는 structure가 도입되면 당연히 만들어지는 법칙이라면, function은 그냥 법칙이다. 그래서 operator도
  function으로 구현할 수 있다. 

  structure의 종류는 많다. array,list,graph,tree, db도 마찬가지다. 이런 구조에는 구조에 맞는 operator
  가 있게 된다. 그리고 function으로 이 구조와,data,operator를 적절히 사용한 법칙을 만들어 내고, 이
  법칙으로 문제를 푼다.

  다시, 종합해서, data가 많아질때, 그것을 정리하기 위해서 structure가 도입되고, structure가 생기면, operator가
  만들어지고, 새로운 법칙도 만들어진다. 
  

  {{{color(red,[알고리즘이란?])}}}
  
  알고리즘이란? operator와 기존의 값, 새로운값, relation, function을 기술해서 모르는것을 찾는 단계를
  말한다. 그래서 알고리즘은 함수를 design해서 만들어질 수도 있고 가장 간단하게 expression을 통해서 
  만들어질 수도 있다. 

  {{{color(red,[data types?])}}}

  #+begin_note
   programming language는 3개의 학문으로부터 시작되었다. 3개의 학문은 고유한 언어와 values를 가지고 
   있고, operator도 각자 가지고 있다. 대부분의 programming languages는 이런 특성들을 그대로 물려받았다.
   3개의 학문을 type이라고 부른다. 무슨말인고 하니, propositional logic의 value는 true/false고,
   이 value들의 있는 공간에서 operator는 and,or,not...같은 connectives가 있다. connectives는 물론
   함수로 표현 가능하다. 수학의 경우도, number라는 value가 있고 number라는 공간에서 +,-,*,/라는 operator
   가 존재한다. predicate logic에선 value가 string이고, string공간에선 많은 operator가 존재한다.
   각각의 type은 value공간과 operator를 포함한다. programming language에서 일반적인 type은
   boole type, String type, number로는 int,float,double이 존재하고 각각의 type에 맞는 operator
   가 존재하게 된다.
  #+end_note

  {{{color(red,[data type과 name 그리고 operator])}}}
   #+begin_note
   value들은 이름을 가질수 있다고 했다. constant와 variable이다. 그럼 type이 있는 현대 언어에서
   constant와 variable에도 type이 있는가? 그렇다. 이름을 붙여서 value를 사용하더라도,
   type을 명시해 주어야 한다. 그럼 operator는 어떤가? operator는 해당 value를 조작하는
   함수(명령어)이기 때문에 value에 영향을 받는다. 예를 들어보자.
   #+BEGIN_SRC 
   int num =3;
   string str ="str";

   num + str이 가능할까? 불가능하다.
   #+END_SRC
   #+end_note   
       
  #+begin_important
  아무것도 없는 상태에서, 태초 지구가 생겼을때라는 비유는 맞지 않지만, 바구니와 사과만 있었다고 하자.
  사과는 2가지 상태를 가질 수 있다. 바구니에 있을때, 바구니에 없을때..바구니와 사과간의 관계가 생긴다.
  우리는 바구니가 사과가 있다. 없다. t/f를 말할 수 있고, 판정할 수도 있다. 사과를 바구니에 넣는다. 바구니에서
  사과를 꺼낸다. 같은 operator도 만들 수 있다. 물리적 세계의 관점에선 존재와 operator밖에 존재하지 않는다.
  하지만, 상상의 나래를 피면 우리는 사과를 똑같이 복제해서 거기에 2라는 값을 줄 수 있다. 음...
  이건 개소리다. 철학적관점을 도입하다 보니...머리속이 복잡해진다. 
  
  #+end_important
  
   #+begin_caution
   lisp은 이런 3개의 학문에서 다루는 것을 통합했다. 그리고 자신만의 value를 정의한다. 그것은 Symbol이다.
   Symbol을 사용해서 기존학문의 value를 모두 사용한다. value를 이동하거나, value를 조작하는 operator
   expression, function을 모두 symbol로 표현한다.
   #+end_caution
   #+end_note
* Introduction
#+begin_note
LISP(LISt Processor)은 IBM704 컴퓨터에서 돌아갈 수 있는 programming system이라고
한다. MIT에서 만들었다. 

#+CAPTION: 704 컴퓨터
#+ATTR_HTML: :width 500px
[[./img/mccarthy/704.jpg]]

Mccarthy는 Advice Taker라는 상식을 수행하는 computer를 만들고 싶었는데, 그래서
논문도 썼다. 이것은 또 다른 논문이라서 여기선 언급하지 않겠지만, 상식을 수행하기
위해선 Declarative sentence의 처리와 imperative sentence에 대한 처리를 할 수
있어야 하기 때문에 LISP이 만들어진거라고 한다. 
 #+begin_tip
모든 언어는 목적이 있다. LISP의 목적은 deduction을 수행할 수 있어야 하기 때문에
수학의 function만을 이용해서 수학적 문제만을 해결할 생각이 없었다. 수리 논리를
프로그래밍 언어로 만들기 위해서, logic과 math의 개념을 차용하는 언어를 만들었다고
보면 된다.
 #+end_tip

Lisp을 단순화 하려고 여러번 고쳤는데, 결국 최종적으로는 특정 symbolic expression을
partial recursive function으로 표현하는 방식을 사용했다. 이런 표현은 기계에 
구애받지 않는다. 독립적인 시스템이기때문에 바로 S-expression과 S-function을 설명해도
문제가 없을꺼 같다.

#+begin_note
이 문서에서, formalism을 제일 먼저 설명하겠다. formalism을 설명해야 함수를 
recursive하게 정의할 수 있기 때문이다.

#+end_note

  

#+end_note
