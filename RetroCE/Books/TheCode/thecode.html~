<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-01-05 Sat 17:27 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>The Code</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Hoyoul Park" />
<meta name="description" content="Org-HTML export made simple."
 />
<meta name="keywords" content="org-mode, export, html, theme, style, css, js, bigblow" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/styles/readtheorg/css/htmlize.css"/>
<link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/styles/readtheorg/css/readtheorg.css"/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
<script type="text/javascript" src="https://fniessen.github.io/org-html-themes/styles/lib/js/jquery.stickytableheaders.min.js"></script>
<script type="text/javascript" src="https://fniessen.github.io/org-html-themes/styles/readtheorg/js/readtheorg.js"></script>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">The Code</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org2b362a1">1. Preface</a>
<ul>
<li><a href="#org262afcf">1.1. 저자</a></li>
<li><a href="#orgde9c0ee">1.2. 저자의 말</a></li>
<li><a href="#org81e626f">1.3. 영어 단어</a></li>
</ul>
</li>
<li><a href="#org4c45231">2. chapter1. Best Friends</a></li>
<li><a href="#org0811665">3. chapter2- Codes and Combinations</a></li>
<li><a href="#orgf7e4c28">4. chapter3 - Braille and Binary Codes</a></li>
</ul>
</div>
</div>
<ul class="org-ul">
<li>if you want go back?  <a href="http://www.holytofrege.space/index.html">home</a></li>
</ul>
<div id="outline-container-org2b362a1" class="outline-2">
<h2 id="org2b362a1"><span class="section-number-2">1</span> Preface</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org262afcf" class="outline-3">
<h3 id="org262afcf"><span class="section-number-3">1.1</span> 저자</h3>
<div class="outline-text-3" id="text-1-1">
<p>
찰스 페졸드(Charles Petzold)
</p>
<div class="org-center">

<div class="figure">
<p><img src="./img/charles.jpg" alt="charles.jpg" />   
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgde9c0ee" class="outline-3">
<h3 id="orgde9c0ee"><span class="section-number-3">1.2</span> 저자의 말</h3>
<div class="outline-text-3" id="text-1-2">
<blockquote>
<p>
10년 정도 고민해서 만든 책. 사람들에게 이책은 컴퓨터의 작동원리를 설명하는 책이라고 함. 사람들은 
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org81e626f" class="outline-3">
<h3 id="org81e626f"><span class="section-number-3">1.3</span> 영어 단어</h3>
<div class="outline-text-3" id="text-1-3">
<pre class="example">

</pre>
</div>
</div>
</div>

<div id="outline-container-org4c45231" class="outline-2">
<h2 id="org4c45231"><span class="section-number-2">2</span> chapter1. Best Friends</h2>
<div class="outline-text-2" id="text-2">
<div class="note">
<blockquote>
<p>
 10살짜리 애들이 나온다. 그들은 밤이 되면 서로 얘기하고 싶지만, 통행금지 시간에
걸려 대화를 할 수 없다. 서로간의 대화&#x2026;그것은 인간의 본능이다.라고 petzold는
말한다.
그럼 어떻게 10살짜리들은 대화를 하려고 할까? 불이꺼진 밤에&#x2026;첫번째 시도는 전화를
하는 것이다. 그러나 전화는 다른 가족이 쉽게 눈치챈다. 소리가 나기 때문이다. 그러면
컴퓨터로 대화하는 건 어떨까? 나우누리같은거&#x2026;그런데 컴퓨터는 10살짜리 꼬마방에
있을 수가 없다.
</p>

<p>
Flashlight다. 후레쉬는 원래 밤에 공부할 학생을 위해 만들어진 것이기 때문에 10살
학생들이라면 누구나 갖고 있다. 10살짜리 학생들은 서로 대화하기 위해서 flashlight
를 사용하기로 한다.
</p>

<p>
창문에 서서 flashlight로 공중에 글자를 그린다. 그리고 조금 쉬었다가 또 그린다. 그런데
그렇게 그린 문자는 정확하지 않다. 그리고 팔이 너무 아프다. 다른 방법을 찾는다. 
영화에서 보면, 먼곳에 떨어진 사람끼리 flash를 깜빡이면서 서로간의 대화를 하는 것을
본적이 있을 것이다. 그 방법을 이용하기로 한다. A는 1번깜빡임, B는 2번,..Z는 26번..이렇게
하면 BAD라는 문자는 2,1,4번으로 표시할 수 있다. 이렇게 하면 더이상 공중에 팔을 휘둘려
문자를 나타낼 필요는 없다. 그런데 "How are you?"라는 문장을 나타낸다고 생각해보자. 
131번이나 깜빡여야 한다.?는 또 어떻게 나타낼 것인가?
</p>

<p>
이런 고민을 했던 또다른 사람이 있다. 모르스다. 그리고 그가 발명한 Morse Code다.
Morse code는 깜빡임을 2개로 나눴다. 긴 깜박임, 짧은 깜빡임. 이렇게 하면,훨씬
복잡해진다. 그렇지만, ?표도 표시할 수 있고, "how are you?"란 문장을 단 32번만
깜빡이면 된다. 131번 깜빡이는것 보다 훨씬 낫다. 
</p>

<p>
Morse code에선 짧은 깜빡임, 긴 깜박임을 dot, dash라고 부른다. 그리고 table이
있다. 문자와 대응되는 table.
</p>

<div class="figure">
<p><img src="./img/morse1.png" alt="morse1.png" width="600px" />
</p>
<p><span class="figure-number">Figure 2: </span>morse code table</p>
</div>

<p>
위의 그림은 morse code라고 부른다. code라는 단어를 이 책에서는 인간과 computer
상에 통신하는 수단을 의미한다. 그런데 code라는 건 사람과 사람사이에 통신하는 
수단을 기본으로 한다. 우리가 말을하거나 제스쳐를 취해서 서로 대화를 하는것, 그것도
code를 사용하는 것이다.
</p>

<p>
이제 morse code가 있으니까, 후레시로 morse code를 표현해 보자.
A는 dot과 dash로 구성되어 있다. dash는 dot의 3배의 길이로 길게 켜야 한다.
dot을 깜빡이고, dot만큼의 길이만큼 쉬고, dash를 깜빡인다. 이러면 A라는 문자를
표현한것이다. 그 다음 문자를 보내기위해선 dash만큼 쉬어주어야 한다.
</p>

<p>
hello라는 글자는 아래와 같이 표현할 수 있다.
</p>


<div class="figure">
<p><img src="./img/morse2.png" alt="morse2.png" width="600px" />
</p>
<p><span class="figure-number">Figure 3: </span>hello morse</p>
</div>

<p>
그러면 word간의 간격은 얼마만큼 쉬어야 하는가? 2 dash만큼 쉬어줘야 한다.
</p>

<p>
예를 들면 "hi there" 은 다음과 같이 표현될 수 있다.
</p>


<div class="figure">
<p><img src="./img/morse3.png" alt="morse3.png" width="600px" />
</p>
<p><span class="figure-number">Figure 4: </span>hi there morse</p>
</div>

<p>
이렇게 표현하는 것도 상당히 어려운 방식이긴 하지만, 그래도 이전보다 보내는 사람과
받는 사람이 서로 대화를 할 수는 있다.
</p>

<p>
이 morse code와 알파벳의 대응이 무작위적으로 매핑한 것 처럼 보이지만, 꼭 그렇지만은
않다. 이 code를 만들때 자주 사용되는 모음같은경우 짧은 dot을 사용했고, 자주 사용되지
않는 알파벳은 Q,Z같은것은 긴 morse code를 배치했다.
</p>

<p>
Morse code로 유명한게 SOS인데, SOS는 약자가 아니다. 가장 빨리칠수 있는 code다. 
또 유명한게 베토벤의 운명의 첫 부분에는 빠빠빠 빠암~으로 시작되는데, 2차 세계대전중에
라디오에서 많이 틀었는데, 이것은 V의 Morse code다. Victory의 V인 것이다.
</p>

<p>
Morse code의 문자에는 대소문자를 구별하지 않았다. 그럼 숫자는?
</p>

<div class="figure">
<p><img src="./img/morse4.png" alt="morse4.png" width="500px" />
</p>
<p><span class="figure-number">Figure 5: </span>numbers morse code</p>
</div>


<p>
그럼 ?와 같은 puntucation mark도 있는가? 있다.
</p>


<div class="figure">
<p><img src="./img/morse5.png" alt="morse5.png" width="500px" />
</p>
<p><span class="figure-number">Figure 6: </span>punctuation mark</p>
</div>

<p>
이렇게 Morse code를 사용하면 10살짜리 학생들은 서로 대화를 할 수 있게 되었다.
물론 분당 5-10단어를 얘기하니까, 느리긴하다. 그러나 많은 발전을 했다. 학생들은
서로 대화를 편하게 하기 위해서 Morse code를 외워서 사용하면 되었다.
</p>

<p>
Morse code는 말을 대체해서 사용할 수도 있다. dot을 "디"로 발음하고 dash를 "다"로
발음하면 빠르게 말할 수 있다. 또 쓸때도 Morse code로 쓸 수 있다. 
</p>
</blockquote>

</div>
</div>
</div>
<div id="outline-container-org0811665" class="outline-2">
<h2 id="org0811665"><span class="section-number-2">3</span> chapter2- Codes and Combinations</h2>
<div class="outline-text-2" id="text-3">
<div class="note">
<p>
Morse code를 만든 사람은 사무엘 모스다. 
</p>


<div class="figure">
<p><img src="./img/samuel.jpg" alt="samuel.jpg" width="300px" />
</p>
<p><span class="figure-number">Figure 7: </span>samuel morse</p>
</div>

<p>
Morse code는 telegraph와 한 몸이다. 그래서 같이 설명해야 한다. code가
대화를 하는 수단이라고 했는데, 그것을 가능하게 해주는 기계가
telegraph이기 때문이다. code가 software라고 한다면 telegraph는 hw다.
</p>


<div class="figure">
<p><img src="./img/telegraph.jpg" alt="telegraph.jpg" width="400px" />
</p>
<p><span class="figure-number">Figure 8: </span>telegraph</p>
</div>

<p>
Morse code는 보내는 건 쉽다. 머리속에 떠오르는 알파벳 -&gt; 표에서
찾는다.-&gt; 모르스 코드를 친다의 과정이기 때문이다. 표도 알파벳 순서로
되어있어서 찾는것도 어렵지 않다.
</p>

<p>
그런데 Morse code를 받는건 쉽지 않다. 모르스 코드를 받는다. -&gt; 표에서
찾는다. 이 부분에서 시간이 오래걸린다. 특정 모르스 코드를 알파벳으로
변경을 바로 할 수 없다.  표에있는 값을 하나하나 다 확인해야 한다.
</p>

<p>
예를 들어서 Z를 morse code에서 찾는건 맨뒤에서 찾아서 바로 보내면
된다. 그런데, .&#x2013; 같은 모르스 부호는 어디서 찾을지 감을 잡을 수
없다. 그냥 처음부터 계속 맞는 부호를 찾아야 한다. 감을 잡을 수
있는것과 없는 것은 차이가 크다. 감을 잡을 수 있으면 훨씬
빠르다. order순으로 나열되어 있기 때문에 감을 잡는 것이다. 반면 감을
잡을 수 없다면, 처음부터 끝까지 일일히 확인하는 과정을 거친다.
</p>

<p>
문제를 찾았으니 고쳐보자.
</p>

<p>
알파벳은 order가 있기 때문에 감을 잡을 수 있다. 그러면 morse code는
어떻게 감을 잡을 까? 분류를 해야 한다. 분류의 기준은 dot과
dash다. 처음 듣는 코드는 무조건 둘중 하나다. . 아니면 - 이다.
</p>


<div class="figure">
<p><img src="./img/morse6.png" alt="morse6.png" width="400px" />
</p>
<p><span class="figure-number">Figure 9: </span>morse to alphabet</p>
</div>

<p>
첫번째 모르스 코드를 듣고, 두번째 모르스 코드를 들으면 그 가지수는
4가지가 있다.
</p>


<div class="figure">
<p><img src="./img/morse7.png" alt="morse7.png" width="400px" />
</p>
<p><span class="figure-number">Figure 10: </span>morse to alphabet</p>
</div>

<p>
그럼 3개의 모르스코드를 들으면, 우리는 2의 3승인 8개의 코드를 얻을 수
있다.
</p>

<div class="figure">
<p><img src="./img/morse8.png" alt="morse8.png" width="400px" />
</p>
<p><span class="figure-number">Figure 11: </span>morse to alphabet</p>
</div>

<p>
그럼 4개의 모르스코드를 들으면, 16개의 코드가 있다.
</p>

<div class="figure">
<p><img src="./img/morse9.png" alt="morse9.png" width="400px" />
</p>
<p><span class="figure-number">Figure 12: </span>morse to alphabet</p>
</div>

<p>
 여기까지 하면 우리는 2+4+8+16 =30개를 쉽게 알아들을 수 있었다. 여기서
26은 알파벳을 말하고,4개는 악센트 문자다.
</p>

<p>
그런데 이 table에서 어떤 규칙성을 볼 수 있다. 하나의 모르스 코드를
들으면 2가지경우가 있을 수 있고, 2개의 모르스코드를 들으면 4개의
경우가 있고, 3개는 8개, 4개는 16개를 들을 수 있다. 2의 제곱으로
나간다. 이것은 tree로 나타내면 더 보기 쉽다.
</p>


<div class="figure">
<p><img src="./img/morse10.png" alt="morse10.png" width="400px" />
</p>
<p><span class="figure-number">Figure 13: </span>morse to tree</p>
</div>

<p>
alphabet을 morse code로 바꿀때는 alphabet의 order의 속성을 이용해서
정렬을 했다. morse code를 alphabet으로 바꿀때는 sequence의 속성을
사용한다. 시간에 따라 분류를 하는것이다. 위에서 .-.은 R이란 문자로
쉽게 변환된다.
</p>

<p>
여기서, 모르스코드의 관점에서 바라보자. 모르스 코드의 길이는 어느 정도
되야 모든 알파벳과 숫자 punctuation mark를 나타낼 수 있는가?  우리가
.과 -로 표현할수 있는 문자의 개수는 4개의 모르스코드로는 다 나타낼
수없다.  4개의 길이를 갖는 모르스코드는 30개의 문자와 대응된다. 그런데
30개로는 알파벳과 악센트 알파벳4개만 대응된다. 따라서 10개의 숫자와
16개의 punctuation mark를 표현해야 하기 때문에 5개의 morse code를
생각해 보자. 32개를 추가적으로 대응 할 수 있기 때문에 10개의 숫자와
16개의 문장부호도 포함된다. 그런데 악센트 문자를 4개만 포함했는데,
나머지도 포함시켜야 하기 때문에 문장부호는 5개로 표현되는 모르스
코드에는 대응이 될 수 없다. 그래서 6개의 모르스코드를 사용하게
된다. 6개는 2의 6승으로 64개의 코드가 생기고 이를 문장부호와 매핑할 수
있다. 그런데 문장부호는 16개만 있기 때문에 남는 코드들이 많아지게
된다. 많은 코드들은 undefined된다. 이렇게 코드가 많아지면 이를 사용할
때, 실수할 확률이 많아지게 마련이다.
</p>

<p>
morse code에서 알파벳으로 변환하는 것을 모색하다가 morse code의 언어적
특성을 살펴보게 됐는데, morse code는 binary코드라고 부른다. 두개의
것으로 표현하기 때문이다. 즉 .과 -. binary code를 알파벳과 쉽게 변환
가능해지면서 우리는 code가 알파벳을 대체해서 사용될 수 있음을 알수
있다. 이것을 interpretable code라고 한다. 만일 binary tree로 손쉽게
알파벳으로 변경할 수 없다면 그 code는 언어로서 사용될 수없다.  특정
코드를 주었을때 일일이 다 찾아야 한다면 그게 어떻게 언어의 대용으로
사용할 수 있겠는가? 이렇게 손쉽게 찾을 수 있기 때문에, 자연언어와 쉽게
변환이 가능하기 때문에 morse code는 대체 언어 혹은 하나의 언어로
사용될 수 있고, interpretable code라고 부른다.  또한 binary code를
연구하는 학문이 따로 있다. 그것의 이름은 combinatorics 혹은
combinatorial analysis라고 부른다. 이 학문은 확률과 통계에서도 많이
쓰인다.
</p>

</div>
</div>
</div>
<div id="outline-container-orgf7e4c28" class="outline-2">
<h2 id="orgf7e4c28"><span class="section-number-2">4</span> chapter3 - Braille and Binary Codes</h2>
<div class="outline-text-2" id="text-4">
<div class="note">
<p>
Chapter2에서 Morse code는 쉽게 알파벳으로 변환가능하기 때문에
interpretable code 라고 한다. 이런 코드를 처음 만든 사람은 Morse가
아니다. Morse code는 Morse보다 더 유명한데, 실은 모든 공은 Braille에게
넘겨야 한다. braille에 대한 biography는 자세히 설명하지 않겠다. 다만
Braille가 장님이라서 책을 읽을 수 있는 수단이 필요했다는 점이다.
</p>

<div class="figure">
<p><img src="./img/braille.jpg" alt="braille.jpg" width="300px" />
</p>
<p><span class="figure-number">Figure 14: </span>braille</p>
</div>

<p>
물론 이전에 Hauy라는 사람이 점자책을 만들었는데, 이게 매우 어려워서 읽기가
어려웠고 책도 별로 없었다.Hauy의 점자책은 A에서 Z까지 알파벳을 그대로
나타냈는데, 이것은 눈먼 사람들에게는 너무 어려웠다.  hauy의 점자책은
종이를 뚫어서 오돌도톨하게 만든책이기 때문에 만들기도 쉽지 않고, 책이
별로 없는건 너무 당연했다.
</p>

<p>
그래서 Braille가 code를 사용해서 점자책을 만들었다. 이게 결론이긴
하지만, 그전에 먼저 아이디어를 제공한 사람이 있다. Charles Barbier란
프랑스 군인이다.  군대를 갔다온 사람들은 알겠지만, 밤에 적과 아군의
피아 식별을 위해서 암구호를 사용하는데, 비슷하게 야간에 전투시 서로
조용히 대화하기 위해서 두꺼운 종이에 못으로 문자를 새겨서 서로
대화하게 만들었는데, 이게 dot과 dash로 이루어진 문자였다. 어..그러면
이거 Morse code인데&#x2026;라고 말할 지 모르지만, 그렇지 않다. 이 군인이
사용한 방식은 특정문장을 짧게 code로 나타낸것이다. 알파벳을 나타낸게
아니다. 그래서 자주 사용되는 문장은 짧게 표현되지만, 긴문장은 상당히
어려워진다. 여튼 그런 방식을 사용한 명령들이 책으로 남아있었다.
</p>

<p>
Braille는 그 책을 좋아했다. 손으로 읽기 너무 쉬웠기 때문이다. 그래서 15세에
이것을 개선한 시스템을 만든다. 이게 오늘날 까지 쓰이는 점자책이다.
</p>

<p>
말이 길어졌는데, 그가 만든 점자책은 다음과 같은 code를 사용한다.
</p>

<div class="figure">
<p><img src="./img/bcode1.png" alt="bcode1.png" width="400px" />
</p>
<p><span class="figure-number">Figure 15: </span>braille's code</p>
</div>

<p>
6개의 동그라미가 있는데, 그 동그라미는 엠보싱되어 있다. 그래서 하나의
원은 binary code를 표현할 수 있다. 그리고 6개가 있으니까,2의 1승+ 2의
2승..  2의 6승개의 문자를 표현할 수 있었다. 어&#x2026;어디서 많이 본거
아닌가? 그렇다.  chapter2에서 모르스코드가 언어로서 기능을 하는이유를
보여주면서 그 구조가 6자리 길이의 모르스 코드를 사용하면서 모든 문자와
숫자 악센트 punctuation mark를 표현할 수 있음을 보여주었는데, 이건
똑같다. 이렇기 때문에 interpretable code의 시초를 Morse가 아닌
Braille로 말할 수 있는 것이다. 그냥 Morse code와 똑같다. 다만 Morse
code는 시간에 따라 정보가 정보가 주어지기 때문에 sequence한
자료구조라면, 이것은 읽고 쓰기 위한 것이기 때문에 6개의 구멍을 한번에
보여준다.  sequential은 1번째 들리는 모르스부호, 2번째로 들리는 모르스
부호&#x2026;로 나타냈다면 이것은 6개의 원에 번호를 붙여서 표현한다. 당연히
Morse 부호가 더 많은 것을 표현한다.  6개의 sequence를 갖는것은 처음에
들리는 부호는 Braile문자표중 동그라미 하나만 표시된 문자표를
받는것이고, 2개의 부호를 듣는건 2개의 원이 표시된 문자표를
받는것이다. 그리고 6개의 소리를 듣고 판단할때는, 6개의 원이 표시된
문자표를 받는 것이다. 따라서 모르스 부호는 2+4+8+16+32+64=128개의
문자와 대응되고, Braille는 64개의 문자와 대응된다.
</p>


<div class="figure">
<p><img src="./img/bcode2.png" alt="bcode2.png" width="400px" />
</p>
<p><span class="figure-number">Figure 16: </span>Braille Code</p>
</div>

<p>
이렇게 64의 코드가 있다. 그런데 만일, 64개의 코드가 다 안사용된다면 우리는 질문을
해야 한다. 왜 안사용하는 code가 있지? 만일 64개의 코드보다 더 많은 코드를 사용할
수 있다면 우리는 제정신인지를 check해야 한다. 이것은 2+2 =4라는 수학적 진리를 
거부하는 것이기 때문이다. 이런 얘기를 하는 이유는 Braille코드가 위 둘 중 하나이기
때문이다. 코드들 중에 반드시 사용되어야 하는 것들을 Braille이 표시해야 했다는데
한번 따라가 보자.
</p>

<p>
우선 코드중에 소문자는 반드시 필요하다.
</p>

<div class="figure">
<p><img src="./img/bcode3.png" alt="bcode3.png" width="400px" />
</p>
<p><span class="figure-number">Figure 17: </span>Braille code low letters</p>
</div>

<p>
이 코드를 사용해서 "you and me"를 써보자.
</p>


<div class="figure">
<p><img src="./img/bcode4.png" alt="bcode4.png" width="400px" />
</p>
<p><span class="figure-number">Figure 18: </span>"you and me"</p>
</div>

<p>
단어사이에 공백이 있고, 알파벳사이에도 약간의 공백이 있다. 이렇게 해서 표현하는것은
당연해 보인다.
위 표를 좀 살펴보면, w가 없다. 프랑스에는 그 당시 w란 문자를 사용하지 않았다고 한다.
그래서 64개의 코드중에 25개는 소문자를 나타내기 위해 반드시 할당해야 했다. 그리고 
그당시 프랑스어는 accent를 사용했기 때문에 추가적인 accent코드가 필요하다. 그런데
accent코드를 살펴보기 전에, 이 소문자를 사용한 패턴을 좀 살펴볼 필요가 있다.
</p>

<p>
첫번째줄을 보면(a-j)는 1,2,4,5의 4개의 원만을 사용하는 것을 볼 수 있다. 2번째
줄은 첫번째줄을 그대로 복사해서 사용하고, 3번원을 추가로 사용한다. 그리고 3번째
줄을 보자. 두번째줄을 복사해서 사용하고, 6번원을 추가로 사용한다. 그런데 3번째줄은
다 표현하지 않는다. 왜냐 알파벳이 25개이기 때문이다. 
</p>

<p>
그런데 petzold는 여기서 화제를 약간 바꿔서 30개의코드를 사용하는 또다른 예를 보여준다.
소문자의 개수는 25개이지만 패턴이 있는데 모든 패턴을 적용하면 30개의 문자를 먼저 만든다.
</p>

<p>
그리고 그것이 공백문자와 같이 쓰인다면 특정단어를 나타내게 고안했음을 보여준다. 즉
알파벳이 단어로 쓰일 수 있음을 보여준다. 공백만 있다면&#x2026; 한번보자. 각각의 알파벳이
단어와 매핑된것을 볼 수 있다.
</p>


<div class="figure">
<p><img src="./img/bcode5.png" alt="bcode5.png" width="400px" />
</p>
<p><span class="figure-number">Figure 19: </span>단어 매핑 알파벳</p>
</div>

<p>
이것을 보면, 31(1개는 공백)개의 Braille코드로, 알파벳 25개와 단어들 30개를
표현할 수 있음을 보여준다. Braille코드는 6개의 원으로 64개의 알파벳을 표현한다고 
했는데, 단어를 표현할 수 있게 되면서, 64개보다 더 많은 것을 표현할꺼 같은 생각을
들게 한다. 아직은 모르겠다. petzold의 설명을 들어보자.
</p>


<div class="figure">
<p><img src="./img/bcode6.png" alt="bcode6.png" width="400px" />
</p>
<p><span class="figure-number">Figure 20: </span>you and me</p>
</div>

<p>
아까 예를 들었던 you and me가 3개의 Braile문자로 대치되는 것을 볼 수 있다. 단축키처럼
매우 간단하게 표현하는 점은 좋은것같다. 그런데 64개보다 더 많은 것을 표현하는지 여부는
아직 말하지 않는다. 여튼 구조적인 패턴에서 단어를 매핑해서 쓰는것은 상당히 편리한
방법인거 같다. 이런 단어 매핑을 더 확장해 보자.
</p>

<p>
소문자 표에서 2번째줄은 1번째 줄에서 3번원을 추가한것이고, 3번째 줄은 2번째 줄에서 
6번원을 추가시킨것이다. 그래서 3번째 줄은 1번째 줄에서 3,6원을 추가시켰다고 볼 수
있다. 그러면 1번째 줄에서 6번원만 추가시킨 패턴을 하나 더 만들 수 있다. 그래서
10개의 코드를 추가해 보자. 이것을 4번째 줄로 말해도 된다. 4번째줄은 단어 매핑과는
다르다. 그냥 하나의 문자다. 
</p>


<div class="figure">
<p><img src="./img/bcode7.png" alt="bcode7.png" width="400px" />
</p>
<p><span class="figure-number">Figure 21: </span>4번째 열</p>
</div>

<p>
단어 매핑으로 아까 "you and me"를 간단히 표현했듯이  about이란 단어도 간단히
표현 할 수 있다.
</p>


<div class="figure">
<p><img src="./img/bcode8.png" alt="bcode8.png" width="400px" />
</p>
<p><span class="figure-number">Figure 22: </span>about</p>
</div>

<p>
이제 1번째 줄에서 한칸 내려서 표현할 수 있다. 표현하는것은 다음과 같다.
</p>

<div class="figure">
<p><img src="./img/bcode9.png" alt="bcode9.png" width="400px" />
</p>
<p><span class="figure-number">Figure 23: </span>5번째</p>
</div>

<p>
여기까지 하면 단어를 제외하고, 51개(빈공백포함)의 문자를 표현했다. 그 다음 6개의
문자를 표현하는데, 여기선 특별한 것이 있다. ble라는 문자인데, 이것은 숫자를 사용하는
데 사용된다. 예를 들어 ble라는 문자가 첫번째 줄 문자의 앞에 있으면 숫자가 된다.
</p>

<p>
즉 braille문자 세트에는 숫자를 단독으로 할당하지 않는다.
</p>

<p>
7개의 문자를 보자.
</p>

<div class="figure">
<p><img src="./img/bcode10.png" alt="bcode10.png" width="400px" />
</p>
<p><span class="figure-number">Figure 24: </span>7개의 문자.</p>
</div>

<p>
그리고 숫자는 첫번째 줄과 같다. 
</p>


<div class="figure">
<p><img src="./img/bcode11.png" alt="bcode11.png" width="400px" />
</p>
<p><span class="figure-number">Figure 25: </span>숫자</p>
</div>

<p>
예를들어 256이란 숫자는 다음과 같이 표현된다.
</p>

<div class="figure">
<p><img src="./img/bcode12.png" alt="bcode12.png" width="400px" />
</p>
<p><span class="figure-number">Figure 26: </span>256이란 숫자.</p>
</div>


<p>
이제 마지막으로 7개의 문자만 소개하면 64개의 문자를 다 소개할 수 있다.
</p>

<div class="figure">
<p><img src="./img/bcode13.png" alt="bcode13.png" width="500px" />
</p>
<p><span class="figure-number">Figure 27: </span>7개의 마지막 문자.</p>
</div>

<p>
이건 좀 설명이 필요하다. indicator라는것은 특별한 표시를 나타내는 문자라고 할
수 있다. 우리가 숫자앞에 ble코드를 넣으면, 뒤에는 숫자로 인식한다고 했다. 그러면
letter indicator는 다시 문자로 인식하는 것이다. number, letter indicator는 
shift code 혹은 Precedence 코드라고 한다. shift code는 문자의 본래 의미를 바꿔버린다.
 숫자에서 문자로&#x2026;
</p>

<p>
비슷한 indicator로 capital indicator는 있는데, 이것은 다음에 나오는 문자를
대문자가 된다. 이런 code를 escape문자라고 한다. escape문자는 일련의 문자의 해석을
벗어나 새로운 해석을 하게 만든다. 하지만, 의미가 바꿔지진 않는거 같다.
</p>

</div>

<div class="tip">
<p>
여기까지 Braille의 문자셋을 공부했는데, 너무 자세히 알 필요는
없다. 장님이라면 당연히 알아야 겠지만, 그럴필요 없다. 어떻게
만들어졌고 어떤 특징이 있는지 대략적으로 알아도 된다.  요약하면,
braille코드는 binary를 나타낼수 있는 원 6개로 64개의 코드를 만들었다.
그리고 이 64의 코드로 자연어의 알파벳과 단어를 매핑시키는데 이 방법이
대단히 주목할 만 하다. 특징을 살펴보자. 크게 2가지인데, 첫번째로
indicator의 사용. 그리고 문자하나로 단어의 매핑,prefix의 매핑을 들 수
있다.  이건 64개의 코드를 효율적으로 썼다는 것이다. 일반인에게 64개의
코드를 매핑하라고 한다면, 26개의 문자는 대문자, 26개는 소문자, 10개는
숫자, 2개는 puntuation mark로 나타낼 것이다.  나 또한 그렇다. 그런데
이렇게 표현하면 처음 만든 Hauy의 생각과 벌다를 바 없다. 그냥
자연언어의 알파벳을 그대로 적용하겠다는 뜻이니까&#x2026;그렇지 않게 했다는
면에서 혁명적이다.  대문자와 숫자를 indicator를 이용해서 2개의
문자밖에 사용하지 않았다. 그리고 문자를 단어와 대응 시키면서
배치하면서 적은 문자로 긴 자연어를 표시할 수 있게 했다. 이것은 굉장히
효율적인 것이다. 빨리 쓰고 빨리 읽을수 있게 한것이다.
</p>

</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Hoyoul Park</p>
<p class="date">Created: 2019-01-05 Sat 17:27</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
